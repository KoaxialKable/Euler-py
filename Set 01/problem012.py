#! /usr/bin/env python
#######################################
#	Problem 12
#	Highly divisible triangular number
#
#	The sequence of triangle numbers is generated by adding the natural numbers.
#	So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
#	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#	Let us list the factors of the first seven triangle numbers:
#
#		1: 1
#		3: 1,3
#		6: 1,2,3,6
#		10: 1,2,5,10
#		15: 1,3,5,15
#		21: 1,3,7,21
#		28: 1,2,4,7,14,28
#
#	We can see that 28 is the first triangle number to have over five divisors.
#	What is the value of the first triangle number to have over five hundred divisors?
#
#	Answer: 76576500, the triangle number of 12375
#######################################

# Returns the triangle number for a given number
def tri(n):
	
	# The formula for any given triangle number is (n * (n+1)) / 2
	return int((n*(n+1))/2)

# Returns the number of divisors a given number, n has
def countDivisors(n):
	count = 1
	if (n == 1):
		return 1
	for i in range(2,int(n**0.5) + 1):
	
		# if the number is a divisor, add 1 to count
		count += {True: 1, False: 0}[n % i == 0]
	
	# return count*2 to account for the matching divisors not counted
	return count*2

seek = True
i = 1
while (seek):
	if (countDivisors(tri(i)) > 500):
		break
	i += 1

# print winning triangle number
print(tri(i))